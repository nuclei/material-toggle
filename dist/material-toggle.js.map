{"version":3,"names":[],"mappings":"","sources":["/src/material-toggle.js"],"sourcesContent":["/**\n * transfer attributes to input\n */\nconst _transferAttributes = function (ce, element, allowed) {\n  allowed.forEach(function (attrName) {\n    if (ce.hasAttribute(attrName)) {\n      element.setAttribute(attrName, ce.getAttribute(attrName) || '')\n      ce.removeAttribute(attrName)\n    }\n  })\n}\n\n/**\n * get parent form\n */\nconst _getParentForm = function (current) {\n  current = current.parentElement\n    // return form\n  if (current.constructor === HTMLFormElement) return current // eslint-disable-line no-undef\n    // return false on body\n  if (current.constructor === HTMLBodyElement) return false // eslint-disable-line no-undef\n    // dig one level deeper\n  return _getParentForm(current)\n}\n\nconst makeTemplate = function (strings, ...substs) {\n  var html = ''\n  for (let i = 0; i < substs.length; i++) {\n    html += strings[i]\n    html += substs[i]\n  }\n  html += strings[strings.length - 1]\n  var template = document.createElement('template')\n  template.innerHTML = html\n  return template\n}\n\nvar template = makeTemplate`<style>\n    :host{\n        display: inline-block;\n        position: relative;\n        --material-checkbox-highlight-color: var(--accent-color, rgba(54,79,199,1));\n    }\n    :host ::slotted(input){\n        pointer-events: none;\n        position: absolute;\n        left: -100%;\n    }\n    :host ::slotted(label){\n        display: block;\n        min-width: 0px;\n        min-height: 18px;\n        position: relative;\n        background: transparent;\n        padding-left: 54px;\n    }\n    .material-toggle__switch{\n        position: absolute;\n        display: block;\n        top: 50%;\n        transform: translateY(-50%);\n        left: 0;\n        height: 16px;\n        width: 44px;\n        background: white;\n        background-image: linear-gradient(var(--material-checkbox-bg-color, rgb(206,212,218)), var(--material-checkbox-bg-color, rgb(206,212,218)));\n        border-radius: 100px;\n        transition: all 0.3s ease;\n        pointer-events: none;\n    }\n    .material-toggle__knob {\n        position: absolute;\n        left: -5px;\n        top: -5px;\n        display: block;\n        width: 26px;\n        height: 26px;\n        border-radius: 100px;\n        background: var(--material-checkbox-knob-color, rgb(255,255,255));\n        box-shadow: var(--material-checkbox-shadow, 0 .2em .5em rgba(0,0,0,.15));\n        content: '';\n        transition: all 0.3s ease;\n    }\n    :host([checked]) .material-toggle__switch{\n        background-image:\n        linear-gradient(rgba(255,255,255,0.75), rgba(255,255,255,0.75)),\n        linear-gradient(var(--material-checkbox-highlight-color), var(--material-checkbox-highlight-color));\n    }\n    :host([checked]) .material-toggle__knob {\n        left: 20px;\n        background: var(--material-checkbox-highlight-color);\n    }\n    :host([disabled]) .material-toggle__switch{\n        background: var(--material-checkbox-disabled-bg-color, rgb(241,243,245));\n        pointer-events: none;\n    }\n    :host([disabled]) .material-toggle__knob{\n        background: var(--material-checkbox-disabled-knob-color, rgb(206,212,218));\n        box-shadow: var(--material-checkbox-disabled-shadow, 0 .2em .5em rgba(0,0,0,.1));\n    }\n    :host(:focus){\n        outline: none;\n    }\n    :host(:focus) .material-toggle__knob:not(.unfocused){\n        box-shadow: var(--material-checkbox-shadow, 0 .2em .5em rgba(0,0,0,.15)), 0 0 0 .7em rgba(0,0,0,.15);\n    }\n    :host([checked]:focus) .material-toggle__knob:not(.unfocused){\n        box-shadow: var(--material-checkbox-shadow, 0 .2em .5em rgba(0,0,0,.15)), 0 0 0 .7em var(--material-checkbox-semi-highlight-color, rgba(54,79,199,.25));\n    }\n</style>\n    <slot></slot>\n    <div class=\"material-toggle__switch\">\n        <div class=\"material-toggle__knob\" draggable=\"true\"></div>\n    </div>\n`\n\nShadyCSS.prepareTemplate(template, 'material-toggle') // eslint-disable-line no-undef\n/**\n * A simple (boolean) material toggle based on a checkbox, which works in a normal html form\n */\nclass MaterialToggle extends HTMLElement { // eslint-disable-line no-undef\n\n  constructor () {\n    super()\n        // Attach a shadow root to the element.\n    let shadowRoot = this.attachShadow({mode: 'open'})\n    ShadyCSS.applyStyle(this) // eslint-disable-line no-undef\n    shadowRoot.appendChild(document.importNode(template.content, true))\n  }\n\n  connectedCallback () {\n        // get elements\n    this.$knob = this.shadowRoot.querySelector('.material-toggle__knob')\n    this.$label = document.createElement('label')\n    this.$label.innerHTML = `\n            <input type=\"checkbox\" tabindex=\"-1\" style=\"position: absolute; opacity: 0; pointer-events: none;\"/>\n            <div class=\"material-toggle__label\">${this.innerHTML}</div>\n        `\n        // remove potential label from slot as it is added above\n    this.innerHTML = ''\n    this.appendChild(this.$label)\n    this.$checkbox = this.querySelector('input')\n\n    _transferAttributes(this, this.$checkbox, [\n      'name',\n      'required',\n      'autofocus'\n    ])\n        // reset values\n    this.disabled = this.disabled\n    this.checked = this.checked\n        // add events\n    this._addEvents()\n  }\n\n  _addEvents () {\n        // add event\n    this.$checkbox.addEventListener('change', function (e) {\n      this.checked = e.target.checked\n    }.bind(this))\n        // move focus to main element if checkbox is focused\n    this.$checkbox.addEventListener('focus', function () {\n      this.focus()\n    }.bind(this))\n        // toggle checkbox in space\n    this.addEventListener('keydown', function (e) {\n            // space\n      if (e.keyCode === 32) {\n        this.checked = !this.$checkbox.checked\n      }\n    }.bind(this))\n        // submit form on return\n    this.addEventListener('keydown', function (e) {\n      var $form = _getParentForm(e.target)\n            // return\n      if (e.keyCode === 13) {\n        if ($form.checkValidity()) {\n          $form.submit()\n        } else if ($form.querySelector('[type=\"submit\"]') !== null) {\n                    // needed to trigger validation\n          $form.querySelector('[type=\"submit\"]').click()\n        }\n        return\n      }\n    })\n        // remove focus on click\n    this.$label.addEventListener('mousedown', function () {\n      this.$knob.classList.add('unfocused')\n    }.bind(this))\n        // add focus on mouse event\n    this.$label.addEventListener('keydown', function () {\n      this.$knob.classList.remove('unfocused')\n    }.bind(this))\n  }\n\n  static get observedAttributes () {\n    return [\n            /** @type {boolean} When given the element is totally inactive */\n      'disabled',\n            /** @type {boolean} When given the element is set to active */\n      'checked',\n            /** @type {true|false} When given, sets the validity state */\n      'validity'\n    ]\n  }\n\n  attributeChangedCallback (attrName, oldVal, newVal) {\n    if (this.disabled) {\n      this.setAttribute('tabindex', '-1')\n      this.setAttribute('aria-disabled', 'true')\n    } else {\n      this.setAttribute('tabindex', '0')\n      this.setAttribute('aria-disabled', 'false')\n    }\n  }\n\n  get disabled () {\n    return this.hasAttribute('disabled')\n  }\n\n  set disabled (val) {\n        // Reflect the value of `disabled` as an attribute.\n    if (val) {\n      this.setAttribute('disabled', '')\n      this.$checkbox.setAttribute('disabled', '')\n    } else {\n      this.removeAttribute('disabled')\n      this.$checkbox.removeAttribute('disabled')\n    }\n  }\n\n  get checked () {\n    return this.hasAttribute('checked')\n  }\n\n  set checked (val) {\n    if (val) {\n      this.setAttribute('checked', '')\n      if (this.$checkbox !== undefined) {\n        this.$checkbox.setAttribute('checked', '')\n      }\n    } else {\n      this.removeAttribute('checked')\n      if (this.$checkbox !== undefined) {\n        this.$checkbox.removeAttribute('checked')\n      }\n    }\n  }\n\n  set validity (val) {\n        // Reflect the value of `validity` as an attribute.\n    if (val === true || val === false) {\n      this.setAttribute('validity', val)\n    } else {\n      this.removeAttribute('validity')\n    }\n  }\n\n  get validity () {\n    return this.getAttribute('validity')\n  }\n}\n\ncustomElements.define('material-toggle', MaterialToggle) // eslint-disable-line no-undef\n"],"file":"material-toggle.js"}