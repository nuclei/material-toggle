{"version":3,"sources":["material-toggle.js"],"names":["MaterialToggle","addEventListener","drawRipple","e","offsetX","offsetY","checkbox","document","createElement","type","appendChild","createShadowRoot","innerHTML","$input","querySelector","WebComponents","undefined","flags","shadow","ShadowCSS","shimStyling","shadowRoot","attributesExceptions","_transferAttributes","Object","keys","attributes","key","hasOwnProperty","_transferAttribute","name","value","attrName","val","indexOf","setAttribute","removeAttribute","x","y","div","classList","add","style","top","clientHeight","left","clientWidth","backgroundColor","remove","HTMLInputElement","customElements","define","extends"],"mappings":"AAAA;;;;;;;;;;IAEMA,c;;;AAEF,8BAAc;AAAA;;AACH;AADG;;AAEZ,cAAKC,gBAAL,CAAsB,OAAtB,EAA+B;AAAA,mBAAK,MAAKC,UAAL,CAAgBC,EAAEC,OAAlB,EAA2BD,EAAEE,OAA7B,CAAL;AAAA,SAA/B;AAFY;AAGb;;;;0CAEiB;AACd,gBAAIC,WAAWC,SAASC,aAAT,CAAuB,OAAvB,CAAf;AACAF,qBAASG,IAAT,GAAgB,UAAhB;AACA,iBAAKC,WAAL,CAAiBJ,QAAjB;;AAEA,iBAAKK,gBAAL,GAAwBC,SAAxB;AA0DA,iBAAKC,MAAL,GAAc,KAAKC,aAAL,CAAmB,OAAnB,CAAd;AACA;AACA,gBAAGC,kBAAkBC,SAAlB,IAA+BD,cAAcE,KAAd,CAAoBC,MAApB,KAA+B,IAAjE,EAAsE;AAClEH,8BAAcI,SAAd,CAAwBC,WAAxB,CAAqC,KAAKC,UAA1C,EAAsD,iBAAtD;AACH;AACD,iBAAKC,oBAAL,GAA4B,EAA5B;AACA,iBAAKC,mBAAL;AACH;;AAED;;;;;;8CAGqB;AAAA;AAAA;AAAA;;AAAA;AACjB,qCAAeC,OAAOC,IAAP,CAAY,KAAKC,UAAjB,CAAf,8HAA4C;AAAA,wBAApCC,GAAoC;;AACxC,wBAAI,KAAKD,UAAL,CAAgBE,cAAhB,CAA+BD,GAA/B,CAAJ,EAAyC;AACrC,6BAAKE,kBAAL,CAAwB,KAAKH,UAAL,CAAgBC,GAAhB,EAAqBG,IAA7C,EAAmD,KAAKJ,UAAL,CAAgBC,GAAhB,EAAqBI,KAAxE,EAA+E,KAAKT,oBAApF;AACH;AACJ;AALgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMpB;AACD;;;;;;2CAGmBU,Q,EAAUC,G,EAAKX,oB,EAAqB;AACnD,gBAAGA,qBAAqBY,OAArB,CAA6BF,QAA7B,MAA2C,CAAC,CAA/C,EAAiD;AAC7C,qBAAKnB,MAAL,CAAYsB,YAAZ,CAAyBH,QAAzB,EAAkCC,GAAlC;AACA,oBAAGD,aAAa,IAAhB,EAAqB;AACjB,yBAAKI,eAAL,CAAqB,IAArB;AACH;AACJ;AACJ;;AAEH;;;;mCACWC,C,EAAGC,C,EAAG;AACf,gBAAIC,MAAMhC,SAASC,aAAT,CAAuB,KAAvB,CAAV;AACA+B,gBAAIC,SAAJ,CAAcC,GAAd,CAAkB,QAAlB;AACA,iBAAK/B,WAAL,CAAiB6B,GAAjB;AACAA,gBAAIG,KAAJ,CAAUC,GAAV,GAAmBL,IAAIC,IAAIK,YAAJ,GAAiB,CAAxC;AACAL,gBAAIG,KAAJ,CAAUG,IAAV,GAAoBR,IAAIE,IAAIO,WAAJ,GAAgB,CAAxC;AACAP,gBAAIG,KAAJ,CAAUK,eAAV,GAA4B,cAA5B;AACAR,gBAAIC,SAAJ,CAAcC,GAAd,CAAkB,KAAlB;AACAF,gBAAItC,gBAAJ,CAAqB,eAArB,EAAsC;AAAA,uBAAKsC,IAAIS,MAAJ,EAAL;AAAA,aAAtC;AACD;;;;EA/G0BC,gB;;AAkH7BC,eAAeC,MAAf,CAAsB,iBAAtB,EAAyCnD,cAAzC,EAAyD,EAACoD,SAAS,OAAV,EAAzD","file":"material-toggle.js","sourcesContent":["'use strict';\n\nclass MaterialToggle extends HTMLInputElement {\n\n    constructor() {\n      super(); // always call super() first in the ctor.\n      this.addEventListener('click', e => this.drawRipple(e.offsetX, e.offsetY));\n    }\n\n    createdCallback() {\n        var checkbox = document.createElement('input');\n        checkbox.type = 'checkbox';\n        this.appendChild(checkbox);\n\n        this.createShadowRoot().innerHTML = `\n            <style>\n                :host{\n                }\n                ::content input{\n                    position: relative;\n                    display: inline-block;\n                    border: 0;\n                    margin: 10px 35px 10px 3px;\n                }\n                ::content input:before {\n                    content: \"\";\n                    position: absolute;\n                    display: block;\n                    left: -3px;\n                    top: -3px;\n                    height: 16px;\n                    width: 44px;\n                    background: white;\n                    background-image: linear-gradient(var(--material-checkbox-bg-color, rgb(206,212,218)), var(--material-checkbox-bg-color, rgb(206,212,218)));\n                    border-radius: 100px;\n                    transition: all 0.3s ease;\n                }\n                ::content input:after {\n                    left: 20px;\n                    position: absolute;\n                    left: -5px;\n                    top: -8px;\n                    display: block;\n                    width: 26px;\n                    height: 26px;\n                    border-radius: 100px;\n                    background: var(--material-checkbox-knob-color, rgb(255,255,255));\n                    box-shadow: var(--material-checkbox-shadow, 0 .2rem .5rem rgba(0,0,0,.15));\n                    content: '';\n                    transition: all 0.3s ease;\n                }\n                ::content input:active:after {\n                    transform: scale(1.15, 0.85);\n                }\n                ::content input:checked:before {\n                    background-image: linear-gradient(var(--material-checkbox-highlight-color, rgba(54,79,199,0.5)), var(--material-checkbox-highlight-color, rgba(54,79,199,0.5)));\n                }\n                ::content input:checked:after {\n                    left: 20px;\n                    background: var(--material-checkbox-highlight-color, rgb(54,79,199));\n                }\n                ::content input:disabled:before{\n                    background: var(--material-checkbox-disabled-bg-color, rgb(241,243,245));\n                    pointer-events: none;\n                }\n                ::content input:disabled:after {\n                    background: var(--material-checkbox-disabled-knob-color, rgb(206,212,218));\n                    box-shadow: var(--material-checkbox-disabled-shadow, 0 .2rem .5rem rgba(0,0,0,.1));\n                }\n            </style>\n            <content></content>\n        `;\n        this.$input = this.querySelector('input');\n        // shim shadowDOM styling\n        if(WebComponents !== undefined && WebComponents.flags.shadow === true){\n            WebComponents.ShadowCSS.shimStyling( this.shadowRoot, 'material-toggle' )\n        }\n        this.attributesExceptions = [];\n        this._transferAttributes();\n    }\n\n    /**\n     * transfer attributes to input\n     */\n    _transferAttributes(){\n        for(var key of Object.keys(this.attributes)){\n            if (this.attributes.hasOwnProperty(key)) {\n                this._transferAttribute(this.attributes[key].name, this.attributes[key].value, this.attributesExceptions);\n            }\n        }\n    }\n    /**\n     * transfer attribute to input\n     */\n    _transferAttribute(attrName, val, attributesExceptions){\n        if(attributesExceptions.indexOf(attrName) === -1){\n            this.$input.setAttribute(attrName,val);\n            if(attrName === 'id'){\n                this.removeAttribute('id');\n            }\n        }\n    }\n\n  // Material design ripple animation.\n  drawRipple(x, y) {\n    let div = document.createElement('div');\n    div.classList.add('ripple');\n    this.appendChild(div);\n    div.style.top = `${y - div.clientHeight/2}px`;\n    div.style.left = `${x - div.clientWidth/2}px`;\n    div.style.backgroundColor = 'currentColor';\n    div.classList.add('run');\n    div.addEventListener('transitionend', e => div.remove());\n  }\n}\n\ncustomElements.define('material-toggle', MaterialToggle, {extends: 'input'});\n"]}